import time
from pathlib import Path

from algorithms.kmp import KnuthMorrisPratt
from algorithms.rabin_karp import RabinKarp
from algorithms.naive import Naive
from algorithms.utils import compare

PATH_TO_BENCHMARKS = Path("./benchmarks")


class StringSearchBenchmark:
    def __init__(self, algorithms, num_runs_per_test=100):
        self.algorithms = algorithms
        self.num_runs_per_test = num_runs_per_test

    def benchmark(self, text, pattern):
        results = {}
        answers = []
        for algorithm in self.algorithms:
            algorithm_times = []
            operations_counts = []

            algorithm.preprocessing(pattern)

            for _ in range(self.num_runs_per_test):
                start_time = time.time()
                result = algorithm.find(text, pattern)
                end_time = time.time()
                algorithm_times.append(end_time - start_time)

                if hasattr(algorithm, "get_operations_count"):
                    operations_counts.append(algorithm.get_operations_count())

            answers.append(result)

            avg_time = sum(algorithm_times) / len(algorithm_times) * 1000
            results[type(algorithm).__name__] = {
                "avg_time": avg_time,
                "operations_count": sum(operations_counts) / len(operations_counts)
                if operations_counts
                else None,
            }

        if not self.check_answers(answers):
            raise Exception()

        return results

    def check_answers(self, answers: list[list[int]]) -> bool:
        for i, el1 in enumerate(answers):
            for j, el2 in enumerate(answers):
                if el1 != el2:
                    return False
        return True


def benchmark(
    benchmark_class: StringSearchBenchmark, text_file: Path, word_file: Path
) -> dict:
    with open(text_file, "r", encoding="utf-8") as f_file, open(
        word_file, "r", encoding="utf-8"
    ) as s_file:
        text = f_file.read()
        pattern = s_file.read()

    return ssb.benchmark(text, pattern)


if __name__ == "__main__":
    comparator = compare
    naive = Naive(comparator=comparator)
    kmp = KnuthMorrisPratt()
    rabin_karp = RabinKarp(100, 6700417, comparator=comparator)

    algorithms = [naive, kmp, rabin_karp]
    ssb = StringSearchBenchmark(algorithms, 100)

    experiment_files = []
    for begin in ("bad", "good"):
        for i in range(1, 5):
            t_name = f"{begin}_t_{i}.txt"
            w_name = f"{begin}_w_{i}.txt"

            t_ind = PATH_TO_BENCHMARKS / t_name
            w_ind = PATH_TO_BENCHMARKS / w_name

            experiment_files.append((t_ind, w_ind))

    results = {}

    print("Files","Text Length", "Pattern length", "Naive avg_time", "Naive comparisons", "KMP avg_time", "KMP comparisons", "RabinKarp avg_time", "RabinKarp comparisons")
    for text_file, word_file in experiment_files:
        results = benchmark(ssb, text_file, word_file)
        for key, val in results.items():
            print(key, val)
            print(
                key,
                text_file.name,
                val["avg_time"],
                int(val["operations_count"]),
                sep=",",
            )

    comparator = compare
    algorithms = [
        Naive(comparator=comparator),
        RabinKarp(100, 6700417, comparator=comparator),
    ]
    ssb = StringSearchBenchmark(algorithms, 100)

    for text_file, word_file in experiment_files:
        results = benchmark(ssb, text_file, word_file)
        for key, val in results.items():
            print(
                key + "SLOW",
                text_file.name,
                val["avg_time"],
                int(val["operations_count"]),
                sep=",",
            )
